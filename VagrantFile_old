# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.

  config.vm.box = "ubuntu/trusty64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  config.vm.network :forwarded_port, guest: 80, host: 3344

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"


  #config.vm.synced_folder "E:/Backups/databases", "/databases_backups/", disabled: false


  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
	config.vm.provision "shell", inline: <<-SHELL


echo -e "\nSTARTING THE INSTALL\n"

sudo apt-get update


echo -e "\nINSTALLING APACHE2\n"

sudo apt-get install -y apache2
if ! [ -L /var/www ]; then
    rm -rf /var/www
    ln -fs /vagrant /var/www
fi
debconf-set-selections <<< 'mysql-server mysql-server/root_password password 987987987'
debconf-set-selections <<< 'mysql-server mysql-server/root_password_again password 987987987'

echo -e "\nINSTALLING Mysql\n"

sudo apt-get install -y mysql-server

echo -e "\nINSTALLING PHP5\n"

#sudo apt-get install -y php5-common libapache2-mod-php5 php5-cli php5-curl php5-mcrypt php5-mysql php5-gd imagemagick php5-imagick

echo -e "\nPhp mod rewrite enabled\n"

#a2enmod rewrite
#php5enmod mcrypt

echo -e "\n--- Add environment variables to Apache ---\n"

cat >> /etc/apache2/apache2.conf <<EOF
<Directory "/vagrant/">
    Options Indexes FollowSymLinks
    AllowOverride All
    Require all granted
</Directory>
EOF

mkdir /var/vagrant_logs

cat > /etc/apache2/sites-available/000-default.conf <<EOF
<VirtualHost *:80>
    ServerAdmin webmaster@localhost
    DocumentRoot /vagrant/public
    ErrorLog /var/vagrant_logs/error.log
    CustomLog /var/vagrant_logs/access.log combined
</VirtualHost>
EOF

echo -e "\n--- Installing Composer for PHP package management ---\n"

curl --silent https://getcomposer.org/installer | php > /dev/null 2>&1
mv composer.phar /usr/local/bin/composer

usermod -aG www-data vagrant
usermod -aG adm vagrant

sudo service apache2 restart

echo -e "\nImporting the database\n"
echo "create database dev" | mysql -u root -p987987987

echo "CREATE USER 'dev'@'localhost' IDENTIFIED BY '987987987';" | mysql -u root -p987987987

echo "GRANT ALL PRIVILEGES ON * . * TO 'dev'@'localhost';" | mysql -u root -p987987987

#mysql -u root -p123456789 sdyc < /databases_backups/seadream.com/sdyc_01092017.sql

echo -e "\nFinished Importing\n"

#echo -e "\nRunning migrations\n"
#cd /vagrant
#php artisan migrate

sudo chmod -R 777 /vagrant/storage

echo -e "\nAll done!\n"

	SHELL
end